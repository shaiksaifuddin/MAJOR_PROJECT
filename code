using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.EventSystems;

public class ElementsScript : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler
{
    private float sizeToIncrease = 25;
    public void OnPointerEnter(PointerEventData eventData)
    {
        this.gameObject.GetComponent<LayoutElement>().minHeight += sizeToIncrease;
        this.gameObject.GetComponent<LayoutElement>().minWidth += sizeToIncrease;
    }

    public void OnPointerExit(PointerEventData eventData)
    {
        this.gameObject.GetComponent<LayoutElement>().minHeight -= sizeToIncrease;
        this.gameObject.GetComponent<LayoutElement>().minWidth -= sizeToIncrease;
    }
}using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using System;

public class HomeScreen_GameManager : MonoBehaviour
{
    public AudioClip[] audioClips;

    public GameObject homeScreenTopPart;
    public Text t;
    public Animator[] anims;

    private AudioSource source;
    private void Start()
    {
        source =  GetComponent<AudioSource>();
    }
    public void slide()
    {
        playsound();
        homeScreenTopPart.GetComponent<Image>().enabled = false;
        homeScreenTopPart.GetComponent<Button>().enabled = false;
        anims[0].SetTrigger("EntryButtonClicked");
        anims[1].SetTrigger("one");
        anims[2].SetTrigger("two");
        anims[3].SetTrigger("three");
        t.enabled = (false);
    }

    private void playsound()
    {
        source.PlayOneShot(audioClips[0]);
    }

    public void loadScene(int sceneIndex)
    {
        playsound();
        SceneManager.LoadScene(sceneIndex);
    }
    public void exitButtonClicked()
    {
        playsound();
        Application.Quit();
    }
}using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using System.IO;

public class ReflexioneOne_GameManager : MonoBehaviour
{
    public GameObject objectToDisable;

    public void disableObject()
    {
        objectToDisable.SetActive(false);
    }

    //Timer
    private float time
    {
        get;    set;
    }
    public Text timerText;
    private int int_time;
    private void Update()
    {
        if(time > 0)
        {
            time -= Time.deltaTime;
        }
        int_time = (int)time;
        timerText.text = int_time.ToString();
    }
    //Initialize Board
    private int difficulty
    {
        get;    set;
    }
    public void getDifficulty(int _difficulty)
    {
        difficulty = _difficulty;
    }

    public GameObject enviroment;
    public GameObject prefab;
    public void startSettingUpEnviroment()
    {
        time = 60;
        while(enviroment.transform.childCount > 0)
        {
            DestroyImmediate(enviroment.transform.GetChild(0).gameObject);
        }
        enviroment.GetComponent<GridLayoutGroup>().constraintCount = difficulty;
        for (int i = 0; i < difficulty * difficulty; i++)
        {
            GameObject g = Instantiate(prefab, enviroment.transform);
            g.name = i.ToString();
        }
        StartCoroutine(chooseObjects());
    }

    private IEnumerator chooseObjects()
    {
        int objectCount = enviroment.transform.childCount;
        if(time > 0)
        {
            enviroment.transform.GetChild(Random.Range(0, enviroment.transform.childCount - 1)).GetComponent<box>().time = 1f;
            yield return new WaitForSeconds(1f);
            StartCoroutine(chooseObjects());
        }
    }
    public Text scoreText;
    public Text highScoreText;
    public void increaseScore()
    {
        int hscore = int.Parse(highScoreText.text);
        int sscore = int.Parse(scoreText.text) + 1;
        if(sscore > hscore)
        {
            highScoreText.text = sscore.ToString();
            string newline = "ReflexioneOne$" + highScoreText.text;
            File.AppendAllText("Assets/Resources/ReflexioneOneResources/SaveData.txt", newline + System.Environment.NewLine);
        }
        else
        {
            scoreText.text = sscore.ToString();
        }
    }
    public void decreaseScore()
    {
        scoreText.text = ((int.Parse(scoreText.text)) - 1).ToString();
    }
    public void ResetGame()
    {
        SceneManager.LoadScene(2);
    }
    private void Start()
    {
        string[] lines = File.ReadAllLines("Assets/Resources/ReflexioneOneResources/SaveData.txt");
        string[] splitted = lines[lines.Length - 1].Split('$');
        highScoreText.text = splitted[1];
    }
    public void ExitToHomeScreen()
    {
        SceneManager.LoadScene(0);
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using System.IO;
using UnityEngine.SceneManagement;

public class ReflexioneTwo_GameManager : MonoBehaviour
{
    public GameObject entryCanvas;
    public void beginGame()
    {
        entryCanvas.SetActive(false);
    }

    
    public GameObject[] containers;
    public Text levelText;
    public Text highScoreText;
    public Text playerturn;

    private int level
    {
        get;    set;
    }
    private int highScore
    {
        get;    set;
    }
    private float duration
    {
        get;    set;
    }
    private GameObject[] gameChoosedContainers;
    private List<GameObject> playerChoosedContainers = new List<GameObject>();
    void Start()
    {
        level = 1;
        string[] lines = File.ReadAllLines("Assets/Resources/ReflexioneTwoResources/SavedData.txt");
        string[] splitted = lines[lines.Length - 1].Split('$');
        highScore = int.Parse(splitted[1]);
        highScoreText.text = highScore.ToString();
        levelText.text = level.ToString();
        duration = 1f;
    }
    public void choose(bool t)
    {
        if (t)
        {
            level = 1;
        }
        levelText.text = level.ToString();
        gameChoosedContainers = new GameObject[level];
        for (int i = 0; i < level; i++)
        {
            GameObject a = containers[Random.Range(0, 5)];
            gameChoosedContainers[i] = a;
        }
        StartCoroutine(changeColors());
    }
    IEnumerator changeColors()
    {
        for (int i = 0; i < level; i++)
        {
            playerturn.enabled = false;
            yield return new WaitForSeconds(1f);
            GameObject g = gameChoosedContainers[i];
            g.GetComponent<Container>().time = duration;
            yield return new WaitForSeconds(duration);
        }
        playerturn.enabled = true;

    }
    public void takeInput(GameObject gObject)
    {
        if(playerChoosedContainers.Count < level)
        {
            playerChoosedContainers.Add(gObject);
        }
        if(playerChoosedContainers.Count == level)
        {
            compare();
        }
    }
    void compare()
    {
        bool levelup = false;
        string _gameChoosed;
        for (int i = 0; i < playerChoosedContainers.Count; i++)
        {
            _gameChoosed = gameChoosedContainers[i].name;
            if(_gameChoosed == playerChoosedContainers[i].name)
            {
                levelup = true;
            }
            else
            {
                levelup = false;
            }
        }
        if (levelup)
        {
            level += 1;
            checkHighScore();
        }
        else if (!levelup)
        {
            level = 1;
        }
        choose(false);
        playerChoosedContainers.Clear();
    }

    void checkHighScore()
    {
        if(level > highScore)
        {
            highScore = level;
            print(highScore);
            highScoreText.text = highScore.ToString();
            string newline = "ReflexioneTwo$" + highScore.ToString();
            File.AppendAllText("Assets/Resources/ReflexioneTwoResources/SavedData.txt", newline + System.Environment.NewLine);
        }
    }
    public GameObject exitDialogueBox;
    public void ExitButtonClicked()
    {
        exitDialogueBox.SetActive(true);
    }
    public void cancelExit()
    {
        exitDialogueBox.SetActive(false);
    }
    public void exitToDesktop()
    {
        Application.Quit();
    }
    public void exitToHomeScreen()
    {
        SceneManager.LoadScene(0);
    }
}

